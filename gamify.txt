## Gamify NameBounce Simulation Plan

**1. Game Concept:**

Transform the existing NameBounce physics simulation into a simple, interactive paddle game. The player controls a single paddle at the bottom of the screen using only mouse hover movements (left/right) to keep one or more balls from falling off the bottom edge.

**2. Core Mechanics:**

*   **Paddle:**
    *   **Single Paddle:** Only one paddle exists, positioned horizontally at the bottom of the game area.
    *   **Mouse Hover Control:** The paddle's horizontal (X-axis) position directly mirrors the mouse cursor's X-position *within the bounds of the game area*. No clicking is involved in paddle movement.
    *   **Boundaries:** The paddle cannot move beyond the left/right edges of the designated game area.
*   **Ball(s):**
    *   **Movement:** Balls move according to the existing physics simulation rules (gravity, velocity, acceleration).
    *   **Wall Collisions:** Balls bounce realistically off the top and side walls of the game area.
    *   **Paddle Collision:** Balls bounce realistically off the top surface of the paddle. The angle of rebound might depend on where the ball hits the paddle (optional complexity).
    *   **Bottom Edge (Game Over):** If a ball touches or goes below the bottom edge of the game area (misses the paddle), the game ends.
*   **Scoring:**
    *   **Basic Score:** Increment score by 1 point for each successful paddle hit.
    *   **Alternative/Additional:** Score could increase based on time survived.

**3. Gameplay Loop:**

1.  **Initialization:**
    *   Game area is displayed with the paddle at the bottom (centered or following mouse initial position).
    *   Score display is visible (starts at 0).
    *   A "Start Game" button is displayed.
2.  **Game Start:**
    *   Player clicks the "Start Game" button.
    *   One ball appears at a starting position (e.g., top center) with an initial downward velocity.
    *   The mouse hover control for the paddle becomes active.
3.  **Gameplay:**
    *   The ball moves and bounces off walls/paddle.
    *   The player moves the mouse left/right over the game area to position the paddle.
    *   Score increments on each paddle hit.
4.  **Game Over:**
    *   If the ball hits the bottom edge:
        *   Ball movement stops.
        *   Paddle control might be disabled.
        *   A "Game Over" message is displayed, possibly showing the final score.
        *   A "Restart" button appears.
5.  **Restart:**
    *   Player clicks the "Restart" button.
    *   The game resets to the Initialization state.

**4. UI/UX Changes:**

*   **Remove Top Paddle:** Eliminate the top paddle element from the original simulation visuals.
*   **Clear Game Area:** Ensure the boundaries (sides, top, bottom edge) are visually distinct.
*   **Score Display:** Add a clear, visible score counter (e.g., top-left or top-right corner).
*   **Start Button:** Implement a button to initiate the game.
*   **Game Over Screen/Message:** Display a clear "Game Over" notification upon losing.
*   **Restart Button:** Provide an obvious way to start a new game after losing.
*   **Paddle Visuals:** Ensure the bottom paddle is clearly identifiable as the player-controlled element.
*   **(Optional) Feedback:** Add subtle visual or sound effects for ball hits (walls, paddle) to enhance feedback.

**5. Technical Implementation Considerations:**

*   **Accessing Simulation Code:** Determine if the code within the `namebounce.netlify.app` iframe can be modified directly or if the game logic needs to be recreated within the main portfolio React application (potentially using a physics library like `matter.js` if needed). Modifying the existing source is preferable if possible.
*   **Event Listeners:** Add a `mousemove` event listener to the game container element.
*   **Paddle Position Update:** In the `mousemove` handler, get the mouse X-coordinate relative to the game container, clamp it within the container's width, and update the paddle's X-position accordingly.
*   **Collision Detection:**
    *   Update/verify ball-paddle collision logic.
    *   Implement ball-bottom edge collision detection.
*   **Game State Management:** Introduce states like `idle`, `playing`, `gameOver`.
*   **UI Components:** Create React components (or modify existing simulation elements) for the score display, start button, game over message, and restart button.

**6. Open Questions/Decisions:**

*   Modify existing simulation source or recreate logic?
*   Single ball or multiple balls? If multiple, how are they introduced?
*   Exact scoring mechanism (per hit, time-based, combination)?
*   Any changes to ball speed or physics over time?
*   Specific visual styling for game elements (paddle, ball, score, buttons). 